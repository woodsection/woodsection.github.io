<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://woodsection.github.io/</id><title>나무계단 블로그</title><subtitle>kubernetes, k8s, docker, server, linux </subtitle> <updated>2022-09-18T17:48:07+09:00</updated> <author> <name>woodsection</name> <uri>https://woodsection.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://woodsection.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://woodsection.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 woodsection </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Maven Local</title><link href="https://woodsection.github.io/posts/maven-local/" rel="alternate" type="text/html" title="Maven Local" /><published>2022-09-18T17:16:00+09:00</published> <updated>2022-09-18T17:16:00+09:00</updated> <id>https://woodsection.github.io/posts/maven-local/</id> <content src="https://woodsection.github.io/posts/maven-local/" /> <author> <name>woodsection</name> </author> <category term="Web" /> <category term="Java" /> <category term="Build" /> <summary> 개요 spring 으로 만들어진 레거시 프로젝트를 살펴보다가, 패키지를 가져올때 maven repo가 아닌 로컬에서 빌드해둔 jar 파일을 import 해오는 구문을 발견했습니다. 살펴보던 프로젝트는 msa에서 하나의 서비스 부분이였는데, 구글 protobuf로 만들어둔 dto 클래스 모음 프로젝트를 로컬에 jar로 빌드하고 해당 jar을 각 프로젝트마다 로컬에서 import 해와 사용하는 형태로 구성되어있었습니다. 패키지를 import 해올때 repo 같은 설정은 크게 신경쓰지 않았던 부분인데, 이번 기회에 간단하게나마 정리해두려고합니다. gradle 빌드 gradle에서 로컬의 maven 저장소로 빌드하는 방법은 간단합니다. gradle publishToMavenLocal r... </summary> </entry> <entry><title>curl 커맨드의 --user 옵션</title><link href="https://woodsection.github.io/posts/curl/" rel="alternate" type="text/html" title="curl 커맨드의 --user 옵션" /><published>2022-09-18T16:16:00+09:00</published> <updated>2022-09-18T17:14:00+09:00</updated> <id>https://woodsection.github.io/posts/curl/</id> <content src="https://woodsection.github.io/posts/curl/" /> <author> <name>woodsection</name> </author> <category term="Linux" /> <summary> Curl 커맨드 curl 명령어는 다음과 같이 사용되며 기본적으로 REST 서비스로 api 요청 테스트등을 위해 사용됩니다. curl [options] &amp;lt;url&amp;gt; –user 옵션 api test를 위해서 curl 명령어 README를 작성하다가 찾게된 내용중에 생소한 --user 옵션이 있어 해당내용에 대해 간단히 기록하려고합니다. -u , --user 옵션을 통해 유저의 계정정보를 담아서 보낼 수 있으며, 쿼리 파라미터를 통해 보내는 것과 같이 동작하게 됩니다. #curl -u &amp;lt;username:userpassword&amp;gt; &amp;lt;url&amp;gt; curl -u testuser:userpassword https://test.com </summary> </entry> <entry><title>Istio 에서의 authentication</title><link href="https://woodsection.github.io/posts/istio-security-authentication/" rel="alternate" type="text/html" title="Istio 에서의 authentication" /><published>2022-07-26T22:32:00+09:00</published> <updated>2022-07-26T22:32:00+09:00</updated> <id>https://woodsection.github.io/posts/istio-security-authentication/</id> <content src="https://woodsection.github.io/posts/istio-security-authentication/" /> <author> <name>woodsection</name> </author> <category term="Infra" /> <category term="Istio" /> <category term="Security" /> <summary> Authentication (인증) 기본 컨셉 Istio에서는 두 가지 authentication(인증) 방식을 제공합니다. Peer authenticaion 클라이언트의 연결을 확인하기 위해 서비스간 인증에 사용되는 인증방식입니다. Istio에서는 서비스 코드의 변경없이 활성화가능한 상호간 TLS를 제공합니다. 서비스간 통신 보호 클러스터 - 클라우드 사이에 운용가능한 ID를 각 서비스에 제공 키, 인증서를 생성 및 배포, 순환을 자동화하는 시스템 제공 Request authentication end 유저를 위한 사용자 인증에 사용됩니다. JWT를 이용한 유효성 검사, 권한확인 혹은 OpenID Co... </summary> </entry> <entry><title>Istio의 Security</title><link href="https://woodsection.github.io/posts/istio-security/" rel="alternate" type="text/html" title="Istio의 Security" /><published>2022-07-25T23:05:00+09:00</published> <updated>2022-07-25T23:08:27+09:00</updated> <id>https://woodsection.github.io/posts/istio-security/</id> <content src="https://woodsection.github.io/posts/istio-security/" /> <author> <name>woodsection</name> </author> <category term="Infra" /> <category term="Istio" /> <category term="Security" /> <summary> 보안(Security) istio를 사용했을 때의 보안적인 특징 애플리케이션과 인프라 코드의 수정없이 기본적으로 보안이 적용됨 기존 보안 시스템과 통합하여 보안 적용 신뢰할 수 없는 네트워크에도 보안을 적용할 수 있음 아키텍쳐 CA(Certificate Authority) key와 인증 관리 설정 API 서버에서 프록시로 정책을 전달함 authentication policies(authentication policies) authorization policies(authorization policies) secure naming information(secure naming information) 사이드카와 p... </summary> </entry> <entry><title>Maven이란 ?</title><link href="https://woodsection.github.io/posts/maven/" rel="alternate" type="text/html" title="Maven이란 ?" /><published>2022-07-17T01:16:00+09:00</published> <updated>2022-07-25T23:10:23+09:00</updated> <id>https://woodsection.github.io/posts/maven/</id> <content src="https://woodsection.github.io/posts/maven/" /> <author> <name>woodsection</name> </author> <category term="Web" /> <category term="Java" /> <category term="Build" /> <summary> Maven Maven이란 Java용 프로젝트 관리도구로 Apache Ant의 대안으로 만듦 프로젝트 전체적인 Life Cycle 관리도구 pom.xml을 이용해 라이브러리를 자동으로 다운로드 각 라이브러리의 dependency 또한 알아서 다운로드 중앙 저장소를 통한 dependency 관리(아파치재단 운영) 자체적 중앙 저장소 구축 가능 (local repo) 간단 설정으로 배포관리 가능 Maven vs Ant Ant 전처리, 컴파일, 패키징, 테스팅, 배포 Maven Life Cycle에 따라 작업을 수행하고, 전반적 프로젝트 관리기능을 포함 Build Tool + Project Management Maven Life Cycle Li... </summary> </entry> </feed>
